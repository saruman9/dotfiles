;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "saruman9"
      user-mail-address "rum.274.4@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
{{- if eq .pc_loc "laptop" }}
(setq doom-font (font-spec :family "monospace" :size 13)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
{{- else }}
(setq doom-font (font-spec :family "monospace" :size 12)
      doom-variable-pitch-font (font-spec :family "sans" :size 12))
{{- end }}

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-gruvbox)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

(after! calendar
  (calendar-set-date-style 'european)
  (setq calendar-week-start-day 1))

(defun open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "Green")  ; org-agenda source
    )))

(after! org-pomodoro
  (setq org-pomodoro-manual-break t))

(setq-default fill-column 100)

(after! langtool
  (setq langtool-default-language "ru-RU"))

(after! emacs-everywhere
  (push "Telegram" emacs-everywhere-markdown-windows)
  (push "firefox" emacs-everywhere-markdown-apps))

(after! git-gutter
  (setq git-gutter:disabled-modes '(image-mode pdf-view-mode)))

(map! (:when (featurep! :tools lsp)
       :n "gh" 'lsp-describe-thing-at-point))

(use-package! visual-fill-column
  :config
  (setq-hook! 'visual-fill-column-mode-hook fill-column 100)
  (add-hook! markdown-mode
             #'visual-fill-column-mode)
  (add-hook! org-mode
             #'visual-fill-column-mode))

(after! docker
  (setenv "DOCKER_HOST" (concat "unix://" (getenv "XDG_RUNTIME_DIR") "/docker.sock")))

(use-package! systemd)

(after! deft
  (setq deft-directory org-directory
        deft-recursive t))

(use-package! org-roam-server
  :after org-roam
  :config
  (defun org-roam-server-open()
    "Open org-roam server in browser."
    (interactive)
    (browse-url-default-browser (format "http://localhost:%d" org-roam-server-port)))
  (org-roam-server-mode 1))

(after! org
  (setq org-capture-templates
        '(("t" "Personal todo" entry
           (file +org-capture-todo-file)
           "* TODO %?\nSCHEDULED: %t\n\n%i\n"
           :unnarrowed t)
          ("n" "Personal notes" entry
           (file +org-capture-notes-file)
           "* %u %?\n%i\n%a"
           :prepend t)
          ("j" "Journal" entry
           (file+olp+datetree +org-capture-journal-file)
           "* %U %?\n%i\n%a"
           :prepend t)
          ("p" "Templates for projects")
          ("pt" "Project-local todo" entry
           (file+headline +org-capture-project-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t)
          ("pn" "Project-local notes" entry
           (file+headline +org-capture-project-notes-file "Inbox")
           "* %U %?\n%i\n%a" :prepend t)
          ("pc" "Project-local changelog" entry
           (file+headline +org-capture-project-changelog-file "Unreleased")
           "* %U %?\n%i\n%a" :prepend t)
          ("o" "Centralized templates for projects")
          ("ot" "Project todo" entry
           #'+org-capture-central-project-todo-file
           "* TODO %?\n %i\n %a"
           :heading "Tasks"
           :prepend nil)
          ("on" "Project notes" entry
           #'+org-capture-central-project-notes-file
           "* %U %?\n %i\n %a"
           :heading "Notes"
           :prepend t)
          ("oc" "Project changelog" entry
           #'+org-capture-central-project-changelog-file
           "* %U %?\n %i\n %a"
           :heading "Changelog"
           :prepend t))))

(after! org-roam
  (push org-roam-directory org-agenda-files)
  (setq org-roam-capture-templates
        '(("y" "yt-task" plain #'org-roam-capture--get-point
           "* ${title}\n%?\n* Body\n\n* Commentaries"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}\n#+roam_key:{{- pass "work/yt/url" -}}issue/${title}
#+roam_tags: {{ pass "work/yt/project/name" }} {{ pass "work/yt/project/tags" -}}\n:PROPERTIES:
:CATEGORY: {{- pass "work/yt/project/tags" -}}\n:END:\n\n"
           :unnarrowed t)
          ("c" "yt-commentary" plain #'org-roam-capture--get-point
           "** ${title}
:PROPERTIES:
:CREATED: %t
:END:

%?"
           :unnarrowed t)
          ("d" "default" plain #'org-roam-capture--get-point
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}\n"
           :unnarrowed t)))
  (setq org-roam-dailies-capture-templates
        '(("j" "journal" entry #'org-roam-capture--get-point
           "* [%T] %?"
           :file-name "daily/%<%Y-%m-%d>"
           :head "#+title: %<%Y-%m-%d>"
           :narrow ))))

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
